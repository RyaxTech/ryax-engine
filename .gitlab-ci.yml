stages:
  - setup
  - init
  - deploy
  - release
  - release_artifacts
  - release_saas

# Conventions
#
# - ryax_config.yaml is the current configuration of the pre-release cluster
# - ryax_config_$CI_COMMIT_TAG is the configuration generated by ryax-adm release

variables:
  RYAX_VALUES: ryax_values.yaml
  RYAX_PROJECTS: ryax_projects.json
  RYAX_CLUSTER_NAME: pre-release
  GITLAB_ID: cicd-ryax # id of the bot. It matters for the API scripts
  GITLAB_TOKEN: $RYAX_CI_ACCESS_TOKEN
  KUBECONFIG: /data/kubeconfig.yaml
  RYAX_ADM_IMAGE: ryax-adm:staging

workflow:
  rules:
    - if: '$CI_COMMIT_TAG =~ /^([0-9]+.){2}[0-9]+([-+][a-zA-Z0-9-]*)?$/'

.k8s_login: &k8s_login
  - RYAX_CLUSTER_ID=$(scw k8s cluster list name=$RYAX_CLUSTER_NAME -o json | jq '.[].id' -r)
  - scw k8s kubeconfig get $RYAX_CLUSTER_ID > $KUBECONFIG

get_staging_commit_sha:
  stage: setup
  image: ryaxtech/ryax-ci:23.11-2
  tags:
    - docker
  artifacts:
    paths:
      - ./ryax_projects.json
  before_script:
    - ""
  script:
    - echo Retrieving staging commit shas
    - ./get_project_versions.sh
    - echo $RYAX_PROJECTS was updated

get_cluster_values:
  stage: setup
  tags:
    - docker
    - kubernetes
  image:
    name: $DEV_REGISTRY_PATH/$RYAX_ADM_IMAGE
    entrypoint: [""]
  artifacts:
    paths:
      - ./ryax_values.yaml
  script:
    - *k8s_login
    - >
      ryax-adm init
      --values $RYAX_VALUES
      --from-cluster
      --set appRegistry.url="$DEV_REGISTRY_PATH"
      --set appRegistry.user="$REGISTRY_USER"
      --set appRegistry.pass="$REGISTRY_PASS"
      --set chartRegistry.url="$DEV_CHART_REPO"
      --set chartRegistry.user="$REGISTRY_USER"
      --set chartRegistry.pass="$REGISTRY_PASS"

set_versions:
  stage: init
  tags:
    - docker
  image: ryaxtech/ryax-ci:23.11-2
  artifacts:
    name: $RYAX_CLUSTER_NAME-values-$CI_COMMIT_TAG
    paths:
      - ./ryax_values.yaml
  before_script:
    - ""
  script:
    - echo Updating service versions
      # Everything except charts contained in common-helm-charts
    - |
      for service in $(jq -c '.[]' $RYAX_PROJECTS); do
        name=$(echo $service | jq -r '.name')
        commit_sha=$(echo $service | jq -r '.staging_commit_sha')
        echo Updating $name version to $commit_sha
        cat $RYAX_VALUES | yq -r -y ". * {\"$name\": {\"chartVersion\" : \"0.0.0-v$commit_sha\"}}" | sponge $RYAX_VALUES
          # cat $RYAX_VALUES | yq -r -y ". * {\"$name\": {\"appVersion\" : \"v$commit_sha\"}}" | sponge $RYAX_VALUES
      done
      # Charts contained within common-helm-charts
    - common_resources_sha="$(jq -r '.[] | select(.name=="commonResources") | .staging_commit_sha' $RYAX_PROJECTS)"
    - |
      for service in datastore registry; do
        echo Updating $service version to $common_resources_sha
        cat $RYAX_VALUES | yq -r -y ". * {\"$service\": {\"chartVersion\" : \"0.0.0-v$common_resources_sha\"}}" | sponge $RYAX_VALUES
      done
    - echo "Resulting $RYAX_VALUES:"
    - cat $RYAX_VALUES

upgrade_pre-release:
  stage: deploy
  tags:
    - docker
  environment:
    name: $RYAX_CLUSTER_NAME
    url: https://$RYAX_CLUSTER_NAME.ryax.io
  image:
    name: $DEV_REGISTRY_PATH/$RYAX_ADM_IMAGE
    entrypoint: [""]
  script:
    - *k8s_login
    - >
      ryax-adm apply
      --values $RYAX_VALUES

release_repositories:
  stage: release
  when: manual
  allow_failure: false
  image: ryaxtech/ryax-ci:23.11-2
  tags:
    - docker
  before_script:
    - ""
  script:
    # Tags all services with this pipeline tag
    - ./tag-repos.sh
